import base64

import pyarrow as pa

ENCODED_SCHEMA = 'ZAEAABAAAAAAAAoADgAGAA0ACAAKAAAAAAADABAAAAAAAQoADAAAAAgABAAKAAAACAAAAAgAAAAAAAAABQAAAPAAAACkAAAAbAAAADgAAAAEAAAANv///xQAAAAUAAAAFAAAAAAABQEQAAAAAAAAAAAAAAAk////BQAAAHBob25lAAAAZv///xQAAAAUAAAAFAAAAAAABQEQAAAAAAAAAAAAAABU////BQAAAGVtYWlsAAAAlv///xQAAAAUAAAAFAAAAAAABQEQAAAAAAAAAAAAAACE////CQAAAGxhc3RfbmFtZQAAAMr///8UAAAAFAAAABQAAAAAAAUBEAAAAAAAAAAAAAAAuP///woAAABmaXJzdF9uYW1lAAAAABIAGAAUABMAEgAMAAAACAAEABIAAAAUAAAAFAAAABgAAAAAAAUBFAAAAAAAAAAAAAAABAAEAAQAAAAKAAAAY29udGFjdF9pZAAA'
KNOWNGOOD_ENCODED_RECORDS = 'mAEAABQAAAAAAAAADAAWAAYABQAIAAwADAAAAAADAwAYAAAA+AAAAAAAAAAAAAoAGAAMAAQACAAKAAAADAEAABAAAAAEAAAAAAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAYAAAAAAAAAAgAAAAAAAAAIAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAGAAAAAAAAAA4AAAAAAAAABAAAAAAAAAASAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAGAAAAAAAAABgAAAAAAAAABAAAAAAAAAAcAAAAAAAAAAAAAAAAAAAAHAAAAAAAAAAGAAAAAAAAACIAAAAAAAAACgAAAAAAAAAsAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAGAAAAAAAAADIAAAAAAAAADAAAAAAAAAAAAAAAAUAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAAAAMAAAAEAAAAAAAAADEyMzQAAAAAAAAAAAUAAAAJAAAADQAAABAAAAAAAAAARGFtb25Kb2huV2FsbEV2ZQAAAAAHAAAACgAAAAsAAAANAAAAAAAAAENvcnRlc2lEb2VFYWgAAAAAAAAAEwAAABwAAAAiAAAAJwAAAAAAAABkYW1vbkBzb21ld2hlcmUuY29tam9obkAuY29td0BsbC5lZUB2LmUAAAAAAAwAAAAYAAAAKAAAADAAAAAAAAAAMjA2LTEyMy00NTY3MjA2LTc2NS00MzIxNDcuNjA2Mi0xMjIuMzMyMTY5NC0zMjc4'

def _parse_schema(encoded_schema):
    return pa.read_schema(pa.BufferReader(base64.b64decode(encoded_schema)))

def test_encoding():
    # 1. Parse the encoded schema
    # 2. Create a PyArrow batch of the records
    # 3. Encode the records
    # 4. Verify the encoded records
    records = {
            'contact_id': ['1', '2', '3', '4'],
            'first_name': ['Damon', 'John', 'Wall', 'Eve'],
            'last_name': ['Cortesi', 'Doe', 'E', 'ah'],
            'email': ['damon@somewhere.com', 'john@.com', 'w@ll.e', 'e@v.e'],
            'phone': ['206-123-4567', '206-765-4321', '47.6062-122.3321', '694-3278']}
    schema = _parse_schema(ENCODED_SCHEMA)
    pa_batch = pa.RecordBatch.from_arrays(
        [pa.array(records[name]) for name in schema.names], schema=schema)
    
    pya_records = base64.b64encode(pa_batch.serialize().slice(4)).decode("utf-8")
    assert pya_records == KNOWNGOOD_ENCODED_RECORDS

if __name__ == "__main__":
    test_encoding()